AWSTemplateFormatVersion: "2010-09-09"
Metadata:
 License: "MIT No Attribution"
Description: "AWS CloudFormation Sample Template to demonstrate DynamoDB auto
 scaling. **WARNING** This template creates an Amazon DynamoDB table. You will
 be billed for the AWS resources used if you create a stack from this template."
Parameters:
 userTableName:
  Type: String
  Default: "myapp.User"
  Description: "Name of the user table"
 userIndexName:
  Type: String
  Default: "user-city-index"
  Description: "Name of the user index"
Resources:
 tableMyAppUser:
  Type: "AWS::DynamoDB::Table"
  Properties:
   TableName:
    Ref: userTableName
   AttributeDefinitions:
    -
     AttributeName: userId
     AttributeType: S
    -
     AttributeName: city
     AttributeType: S
    -
     AttributeName: signupDate
     AttributeType: S
   KeySchema:
    -
     AttributeName: userId
     KeyType: HASH
   ProvisionedThroughput:
    ReadCapacityUnits: 5
    WriteCapacityUnits: 5
   GlobalSecondaryIndexes:
    -
     IndexName:
      Ref: userIndexName
     KeySchema:
      -
       AttributeName: city
       KeyType: HASH
      -
       AttributeName: signupDate
       KeyType: RANGE
     Projection:
      ProjectionType: ALL
     ProvisionedThroughput:
      ReadCapacityUnits: 5
      WriteCapacityUnits: 5
 ScalingRole:
  Type: "AWS::IAM::Role"
  Properties:
   AssumeRolePolicyDocument:
    Version: "2012-10-17"
    Statement:
     -
      Effect: Allow
      Principal:
       Service:
        -
         "application-autoscaling.amazonaws.com"
      Action:
       -
        "sts:AssumeRole"
   Path: "/"
   Policies:
    -
     PolicyName: root
     PolicyDocument:
      Version: "2012-10-17"
      Statement:
       -
        Effect: Allow
        Action:
         - "dynamodb:DescribeTable"
         - "dynamodb:UpdateTable"
         - "cloudwatch:PutMetricAlarm"
         - "cloudwatch:DescribeAlarms"
         - "cloudwatch:GetMetricStatistics"
         - "cloudwatch:SetAlarmState"
         - "cloudwatch:DeleteAlarms"
        Resource: "*"
 UserTableWriteCapacityScalableTarget:
  Type: "AWS::ApplicationAutoScaling::ScalableTarget"
  Properties:
   MaxCapacity: 100
   MinCapacity: 5
   ResourceId: !Sub table/${userTableName}
   RoleARN: !GetAtt ScalingRole.Arn
   ScalableDimension: "dynamodb:table:WriteCapacityUnits"
   ServiceNamespace: dynamodb
 UserTableWriteScalingPolicy:
  Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  Properties:
   PolicyName: WriteAutoScalingPolicy
   PolicyType: TargetTrackingScaling
   ScalingTargetId:
    Ref: UserTableWriteCapacityScalableTarget
   TargetTrackingScalingPolicyConfiguration:
    TargetValue: 70
    ScaleInCooldown: 60
    ScaleOutCooldown: 60
    PredefinedMetricSpecification:
     PredefinedMetricType: DynamoDBWriteCapacityUtilization
 UserIndexWriteCapacityScalableTarget:
  Type: "AWS::ApplicationAutoScaling::ScalableTarget"
  Properties:
   MaxCapacity: 100
   MinCapacity: 5
   ResourceId: !Sub table/${userTableName}/index/${userIndexName}
   RoleARN: !GetAtt ScalingRole.Arn
   ScalableDimension: "dynamodb:index:WriteCapacityUnits"
   ServiceNamespace: dynamodb
 UserIndexWriteScalingPolicy:
  Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  Properties:
   PolicyName: WriteAutoScalingPolicy
   PolicyType: TargetTrackingScaling
   ScalingTargetId:
    Ref: UserIndexWriteCapacityScalableTarget
   TargetTrackingScalingPolicyConfiguration:
    TargetValue: 70
    ScaleInCooldown: 60
    ScaleOutCooldown: 60
    PredefinedMetricSpecification:
     PredefinedMetricType: DynamoDBWriteCapacityUtilization
 UserTableReadCapacityScalableTarget:
  Type: "AWS::ApplicationAutoScaling::ScalableTarget"
  Properties:
   MaxCapacity: 100
   MinCapacity: 5
   ResourceId: !Sub table/${userTableName}
   RoleARN: !GetAtt ScalingRole.Arn
   ScalableDimension: "dynamodb:table:ReadCapacityUnits"
   ServiceNamespace: dynamodb
 UserTableReadScalingPolicy:
  Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  Properties:
   PolicyName: ReadAutoScalingPolicy
   PolicyType: TargetTrackingScaling
   ScalingTargetId:
    Ref: UserTableReadCapacityScalableTarget
   TargetTrackingScalingPolicyConfiguration:
    TargetValue: 70
    ScaleInCooldown: 60
    ScaleOutCooldown: 60
    PredefinedMetricSpecification:
     PredefinedMetricType: DynamoDBReadCapacityUtilization
 UserIndexReadCapacityScalableTarget:
  Type: "AWS::ApplicationAutoScaling::ScalableTarget"
  Properties:
   MaxCapacity: 100
   MinCapacity: 5
   ResourceId: !Sub table/${userTableName}/index/${userIndexName}
   RoleARN: !GetAtt ScalingRole.Arn
   ScalableDimension: "dynamodb:index:ReadCapacityUnits"
   ServiceNamespace: dynamodb
 UserIndexReadScalingPolicy:
  Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  Properties:
   PolicyName: ReadAutoScalingPolicy
   PolicyType: TargetTrackingScaling
   ScalingTargetId:
    Ref: UserIndexReadCapacityScalableTarget
   TargetTrackingScalingPolicyConfiguration:
    TargetValue: 70
    ScaleInCooldown: 60
    ScaleOutCooldown: 60
    PredefinedMetricSpecification:
     PredefinedMetricType: DynamoDBReadCapacityUtilization
